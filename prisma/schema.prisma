generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  slug               String    @unique(map: "product_slug_idx")
  images             String[]
  brand              String
  description        String
  stock              Int
  price              Decimal   @default(0) @db.Decimal(12, 2) // This is the Original Price
  discountPercentage Int       @default(0)
  discountEndDate    DateTime?
  rating             Decimal   @default(0) @db.Decimal(3, 2)
  numReviews         Int       @default(0)
  isFeatured         Boolean   @default(false)
  banner             String?
  createdAt          DateTime  @default(now()) @db.Timestamp(6)

  categoryId String   @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id])

  subCategoryId String?      @db.Uuid
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])

  OrderItem OrderItem[]
  Review    Review[]
}

// --- NEW MODEL: Category ---
model Category {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  slug          String        @unique
  images        String[]
  // Relations
  products      Product[]
  subCategories SubCategory[]
  createdAt     DateTime      @default(now()) @db.Timestamp(6)
}

// --- NEW MODEL: SubCategory ---
model SubCategory {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  slug String @unique

  // Relation to parent Category
  categoryId String   @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Relation to Products
  products  Product[]
  createdAt DateTime  @default(now()) @db.Timestamp(6)
}

// --- END OF NEW MODELS ---

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  Cart          Cart[]
  Order         Order[]
  Review        Review[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems      OrderItem[]
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// --- NEW MODEL for Content Pages ---
model CmsPage {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug    String @unique // This will be the URL part, e.g., "about-us", "shipping-policy"
  title   String // This will be the main heading of the page, e.g., "About Us"
  content String @db.Text // @db.Text is used for long text content. We will store Markdown here.

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

// In prisma/schema.prisma

// ... (your existing models)

model Announcement {
  id       String  @id @default(cuid())
  text     String
  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
